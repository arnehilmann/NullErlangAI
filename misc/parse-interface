#!/usr/bin/env python
import re
import sys

events = {}
with open("../../../../rts/ExternalAI/Interface/AISEvents.h") as eventfile:
    parsing = False
    for line in eventfile:
        if parsing and line.startswith("};"):
            break
        if line.startswith("enum EventTopic"):
            parsing = True
        if not parsing:
            continue
        if "=" not in line:
            continue
        name, _ = line.split("=")
        name = name.strip()
        # print(name)
        events[name] = {}

with open("../../../../rts/ExternalAI/Interface/AISEvents.h") as eventfile:
    parsing = False
    args = []
    struct_name = None
    for line in eventfile:
        if line.startswith("struct "):
            parsing = True
            args = []
            struct_name = line.strip().replace(" {", "")
            continue
        if line.startswith("}; //$ "):
            parsing = False
            name = line.strip().split(" ")[2]
            # print("%s found" % name)
            events[name] = (struct_name, args)
        if not parsing:
            continue
        line = line.strip()
        if line.startswith("/") or line.startswith("*"):
            continue
        m = re.match("^\s*(.*)\s(\S+);$", line)
        if m:
            args.append((m.group(2), m.group(1)))

def indent(indent, s):
    return "    " * indent + s

gen_src = []
for name in sorted(events):
    params = events[name]
    if not params:
        continue
    lines = []
    struct_name, args = params
    lines.append(indent(2, "case %s: {" % name))
    lines.append(indent(4, "ei_x_encode_string(&sendbuf, \"%s\");" % name))
    lines.append(indent(4, "%s* event_data = (%s*)data;" % (struct_name, struct_name)))
    lines.append(indent(4, "ei_x_encode_tuple_header(&sendbuf, %i);" % (2 * len(args))))
    unknown_types = False
    for arg in args:
        arg_name, arg_type = arg
        lines.append(indent(4, "ei_x_encode_string(&sendbuf, \"%s\");" % arg_name))
        if arg_type == "int":
            lines.append(indent(4, "ei_x_encode_long(&sendbuf, event_data->%s);" % arg_name))
        elif arg_type == "const char*":
            lines.append(indent(4, "ei_x_encode_string(&sendbuf, event_data->%s);" % arg_name))
        elif arg_type == "float":
            lines.append(indent(4, "ei_x_encode_double(&sendbuf, event_data->%s);" % arg_name))
        else:
            print("%s: no src generated due to unknown type %s" % (name, arg_type), file=sys.stderr)
            unknown_types = True
    lines.append(indent(4, "break;"))
    lines.append(indent(3, "}"))
    if not unknown_types:
        gen_src.extend(lines)

print("""
#include "ei.h"
#include "ExternalAI/Interface/AISEvents.h"

int add_event_data(ei_x_buff sendbuf, int topic, const void* data) {
    switch (topic) {
""")
print("\n".join(gen_src))
print("""
        default:
            ei_x_encode_long(&sendbuf, topic);
            ei_x_encode_binary(&sendbuf, data, sizeof(data));
    }
    return 0;
}
""")
